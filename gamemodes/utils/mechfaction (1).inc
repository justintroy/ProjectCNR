

static const gVehicleColors[] =
{
    0x000000AA, 0xF5F5F5AA, 0x2A77A1AA, 0x840410AA, 0x263739AA, 0x86446EAA, 0xD78E10AA, 0x4C75B7AA, 0xBDBEC6AA, 0x5E7072AA,
    0x46597AAA, 0x656A79AA, 0x5D7E8DAA, 0x58595AAA, 0xD6DAD6AA, 0x9CA1A3AA, 0x335F3FAA, 0x730E1AAA, 0x7B0A2AAA, 0x9F9D94AA,
    0x3B4E78AA, 0x732E3EAA, 0x691E3BAA, 0x96918CAA, 0x515459AA, 0x3F3E45AA, 0xA5A9A7AA, 0x635C5AAA, 0x3D4A68AA, 0x979592AA,
    0x421F21AA, 0x5F272BAA, 0x8494ABAA, 0x767B7CAA, 0x646464AA, 0x5A5752AA, 0x252527AA, 0x2D3A35AA, 0x93A396AA, 0x6D7A88AA,
    0x221918AA, 0x6F675FAA, 0x7C1C2AAA, 0x5F0A15AA, 0x193826AA, 0x5D1B20AA, 0x9D9872AA, 0x7A7560AA, 0x989586AA, 0xADB0B0AA,
    0x848988AA, 0x304F45AA, 0x4D6268AA, 0x162248AA, 0x272F4BAA, 0x7D6256AA, 0x9EA4ABAA, 0x9C8D71AA, 0x6D1822AA, 0x4E6881AA,
    0x9C9C98AA, 0x917347AA, 0x661C26AA, 0x949D9FAA, 0xA4A7A5AA, 0x8E8C46AA, 0x341A1EAA, 0x6A7A8CAA, 0xAAAD8EAA, 0xAB988FAA,
    0x851F2EAA, 0x6F8297AA, 0x585853AA, 0x9AA790AA, 0x601A23AA, 0x20202CAA, 0xA4A096AA, 0xAA9D84AA, 0x78222BAA, 0x0E316DAA,
    0x722A3FAA, 0x7B715EAA, 0x741D28AA, 0x1E2E32AA, 0x4D322FAA, 0x7C1B44AA, 0x2E5B20AA, 0x395A83AA, 0x6D2837AA, 0xA7A28FAA,
    0xAFB1B1AA, 0x364155AA, 0x6D6C6EAA, 0x0F6A89AA, 0x204B6BAA, 0x2B3E57AA, 0x9B9F9DAA, 0x6C8495AA, 0x4D8495AA, 0xAE9B7FAA,
    0x406C8FAA, 0x1F253BAA, 0xAB9276AA, 0x134573AA, 0x96816CAA, 0x64686AAA, 0x105082AA, 0xA19983AA, 0x385694AA, 0x525661AA,
    0x7F6956AA, 0x8C929AAA, 0x596E87AA, 0x473532AA, 0x44624FAA, 0x730A27AA, 0x223457AA, 0x640D1BAA, 0xA3ADC6AA, 0x695853AA,
    0x9B8B80AA, 0x620B1CAA, 0x5B5D5EAA, 0x624428AA, 0x731827AA, 0x1B376DAA, 0xEC6AAEAA, 0x000000AA, 0x177517AA, 0x210606AA,
    0x125478AA, 0x452A0DAA, 0x571E1EAA, 0x010701AA, 0x25225AAA, 0x2C89AAAA, 0x8A4DBDAA, 0x35963AAA, 0xB7B7B7AA, 0x464C8DAA,
    0x84888CAA, 0x817867AA, 0x817A26AA, 0x6A506FAA, 0x583E6FAA, 0x8CB972AA, 0x824F78AA, 0x6D276AAA, 0x1E1D13AA, 0x1E1306AA,
    0x1F2518AA, 0x2C4531AA, 0x1E4C99AA, 0x2E5F43AA, 0x1E9948AA, 0x1E9999AA, 0x999976AA, 0x7C8499AA, 0x992E1EAA, 0x2C1E08AA,
    0x142407AA, 0x993E4DAA, 0x1E4C99AA, 0x198181AA, 0x1A292AAA, 0x16616FAA, 0x1B6687AA, 0x6C3F99AA, 0x481A0EAA, 0x7A7399AA,
    0x746D99AA, 0x53387EAA, 0x222407AA, 0x3E190CAA, 0x46210EAA, 0x991E1EAA, 0x8D4C8DAA, 0x805B80AA, 0x7B3E7EAA, 0x3C1737AA,
    0x733517AA, 0x781818AA, 0x83341AAA, 0x8E2F1CAA, 0x7E3E53AA, 0x7C6D7CAA, 0x020C02AA, 0x072407AA, 0x163012AA, 0x16301BAA,
    0x642B4FAA, 0x368452AA, 0x999590AA, 0x818D96AA, 0x99991EAA, 0x7F994CAA, 0x839292AA, 0x788222AA, 0x2B3C99AA, 0x3A3A0BAA,
    0x8A794EAA, 0x0E1F49AA, 0x15371CAA, 0x15273AAA, 0x375775AA, 0x060820AA, 0x071326AA, 0x20394BAA, 0x2C5089AA, 0x15426CAA,
    0x103250AA, 0x241663AA, 0x692015AA, 0x8C8D94AA, 0x516013AA, 0x090F02AA, 0x8C573AAA, 0x52888EAA, 0x995C52AA, 0x99581EAA,
    0x993A63AA, 0x998F4EAA, 0x99311EAA, 0x0D1842AA, 0x521E1EAA, 0x42420DAA, 0x4C991EAA, 0x082A1DAA, 0x96821DAA, 0x197F19AA,
    0x3B141FAA, 0x745217AA, 0x893F8DAA, 0x7E1A6CAA, 0x0B370BAA, 0x27450DAA, 0x071F24AA, 0x784573AA, 0x8A653AAA, 0x732617AA,
    0x319490AA, 0x56941DAA, 0x59163DAA, 0x1B8A2FAA, 0x38160BAA, 0x041804AA, 0x355D8EAA, 0x2E3F5BAA, 0x561A28AA, 0x4E0E27AA,
    0x706C67AA, 0x3B3E42AA, 0x2E2D33AA, 0x7B7E7DAA, 0x4A4442AA, 0x28344EAA
};
new bool:IsMechCustomer[MAX_PLAYERS];
new TunerMechID[MAX_PLAYERS];
new MechArea;
new Text3D:MechRate3DLabel;

enum FactionData
{
	IsAMember,
	IsALeader,
	bool:IsOnDuty,
	bool:IsLeader,
	bool:IsMember,
	bool:HasActiveCP,
	bool:HasOfferedTuning,
	CustomerID,
	CustomerVehID,
	CustomerVehComp,
	CustomerVehComp2,
	CustomerColor1,
	CustomerColor2,
	IsCustomerPaintjob
}
new MechFaction[MAX_PLAYERS][FactionData];


enum MechPlayerData
{
	Text3D: GarageTiresLabel,
	Text3D: GarageColorLabel,
	Text3D: GarageExhaustLabel,
	Text3D: GarageBumperLabel,
	Text3D: GarageRoofLabel,
	Text3D: GarageSpoilerLabel,
	Text3D: GarageSkirtLabel,
	Text3D: GarageNitroLabel,
	Text3D: GarageHydroLabel,
	Text3D: GarageStereoLabel
}
new MechGarageData[MAX_PLAYERS][MechPlayerData];

enum MechCustomerData
{
	bool:CustomerTires,
	Text3D: CustomerTiresLabel,
	bool:CustomerColor,
	Text3D: CustomerColorLabel,
	bool:CustomerExhaust,
	Text3D: CustomerExhaustLabel,
	bool:CustomerBumper,
	Text3D: CustomerBumperLabel,
	bool:CustomerRoof,
	Text3D: CustomerRoofLabel,
	bool:CustomerSpoiler,
	Text3D: CustomerSpoilerLabel,
	bool:CustomerSkirt,
	Text3D: CustomerSkirtLabel,
	bool:CustomerNitro,
	Text3D: CustomerNitroLabel,
	bool:CustomerHydro,
	Text3D: CustomerHydroLabel,
	bool:CustomerStereo,
	Text3D: CustomerStereoLabel
}
new MechCustomer[MAX_PLAYERS][MechCustomerData];

CMD:mechrate(playerid, params[])
{
	new fee, string[250];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5 || MechFaction[playerid][IsLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "d", fee)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mechrate [fee amount per tuning]");
	if(fee < 100) return SendClientMessage(playerid, COLOR_GREY, "Fee must not be less than $100");
	MechFee = fee;
	format(string, sizeof(string), "[WELCOME TO EAST BEACH MECHANICS!]\n\n{00AA00}Current rate: $%d", MechFee);
	UpdateDynamic3DTextLabelText(MechRate3DLabel, COLOR_LIGHTBLUE, string);
	if(PlayerInfo[playerid][pAdmin] > 5)
	{
		format(string, sizeof(string), "*** Admin has set the tuning rate. New fee: $%d", fee);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
	}
	else if(MechFaction[playerid][IsLeader])
	{
		format(string, sizeof(string), "*** Mech Leader has set the tuning rate. New fee: $%d", fee);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
	}
	return 1;
}

CMD:makemech(playerid, params[])
{
	new targetid, string[250];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5 || MechFaction[playerid][IsLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makemech [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	MechFaction[targetid][IsAMember] = 1;
	MechFaction[targetid][IsMember] = true;
	format(string, sizeof(string), "AdmWarn: %s has given %s the {33AA33}Mechanic {AA3333}faction membership.", RPN(playerid), RPN(targetid));
    SendAdminMessage(COLOR_DARKRED, 1, string);
	format(string, sizeof(string), " %s has given you the {33AA33}Mechanic {33CCFF}faction membership.", RPN(playerid));
	SendClientMessage(targetid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "AdmWarn: %s has given %s the Mechanic faction membership.", RPN(playerid), RPN(targetid));
	Log("logs/factions.log", string);
	SaveChar(playerid);
	return 1;
}

CMD:makemechleader(playerid, params[])
{
	new targetid, string[250];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makemechleader [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	MechFaction[targetid][IsAMember] = 1;
	MechFaction[targetid][IsMember] = true;
	MechFaction[targetid][IsALeader] = 1;
	MechFaction[targetid][IsLeader] = true;
	format(string, sizeof(string), "AdmWarn: %s has given %s the {33AA33}Mechanic {AA3333}faction LEADERSHIP.", RPN(playerid), RPN(targetid));
    SendAdminMessage(COLOR_DARKRED, 1, string);
	format(string, sizeof(string), " %s has given you the {33AA33}Mechanic {33CCFF}faction LEADERSHIP.", RPN(playerid));
	SendClientMessage(targetid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "AdmWarn: %s has given %s the Mechanic faction LEADERSHIP.", RPN(playerid), RPN(targetid));
	Log("logs/factions.log", string);
	SaveChar(playerid);
	return 1;
}

CMD:mechduty(playerid, params[])
{
	new string[258];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!MechFaction[playerid][IsMember]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInDynamicArea(playerid, MechArea)) return SendClientMessage(playerid, COLOR_GREY, "You must be in East Beach Mechanics Place to start tuning.");
	if(!IsPlayerInRangeOfPoint(playerid, 5, 1014.4583, -1967.3177, 13.9889)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from the pickup.");
	if(MechFaction[playerid][IsOnDuty])
	{
		MechFaction[playerid][IsOnDuty] = false;
		SetPlayerSkin(playerid, LastSkin[playerid]);
		LastSkin[playerid] = -1;
		format(string, sizeof(string), "~r~]EAST BEACH MECHANICS]~n~~y~Thank you for your service! Comeback again!");
		GameTextForPlayer(playerid, string, 5000, 3);
		RemovePlayerAttachedObject(playerid, 5);
		RemovePlayerAttachedObject(playerid, 6);
	}
	else if(!MechFaction[playerid][IsOnDuty])
	{
		LastSkin[playerid] = GetPlayerSkin(playerid);
		format(string, sizeof(string), "~r~]EAST BEACH MECHANICS]~n~~y~Start offering services with ~g~/tuning");
		GameTextForPlayer(playerid, string, 5000, 3);
		MechFaction[playerid][IsOnDuty] = true;
		SetPlayerSkin(playerid, 50);
		SetPlayerAttachedObject(playerid, 5, 19627, 6, 0.0750, 0.0340, 0.0000, 97.4999, 1.1999, 103.9000, 2.3209, 3.1059, 2.6939, 0xFFFFFFFF, 0xFFFFFFFF);
		SetPlayerAttachedObject(playerid, 6, 3044, 2, 0.0690, 0.0450, 0.0349, 0.0000, -21.3999, -173.3999, 1.0000, 0.9029, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
	}
	return 1;
}

// 1- Wheels/Tires 						1004.0828, -1944.8304, 14.1619
// 2- Nitro 							1013.7177, -1939.0479, 14.0019
// 3- Car Color/Paintjob 				1001.4952, -1954.7518, 14.2152
// 4- Stereo 							1003.1806, -1946.7775, 14.1858
// 5- Hydraulics 						1002.9689, -1951.9474, 14.1895
// 6- Side Skirts 						1001.1490, -1957.5988, 14.2212
// 7- Exhaust 							1013.7177, -1939.0479, 14.0019
// 8- Roof 								1001.4976, -1954.6532, 14.2152
// 9- Spoiler 							1001.4976, -1954.6532, 14.2152
// 10- Bumper 							1001.4976, -1954.6532, 14.2152



GetComponents(playerid, targetid, compid)
{
	new string[250], customername[MAX_PLAYER_NAME], mechanicname[MAX_PLAYER_NAME];
	new customerid = MechFaction[playerid][CustomerID];
	GetPlayerName(playerid, mechanicname, sizeof(mechanicname));
	GetPlayerName(customerid, customername, sizeof(customername));

	switch(compid)
	{
		case 1: // Wheels/Tires
		{
			MechFaction[playerid][CustomerID] = targetid;
			MechGarageData[playerid][GarageTiresLabel] = CreateDynamic3DTextLabel("Get Wheels Here!\n/getcomp", -1, 1004.0828, -1944.8304, 14.1619, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerTires] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1004.0828, -1944.8304, 14.1619,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab a wheels for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received your selected Wheel...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 2: //Nitro
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageNitroLabel] = CreateDynamic3DTextLabel("Get Nitrous oxide here!\n/getcomp", -1, 1013.7177, -1939.0479, 14.0019, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerNitro] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1013.7177, -1939.0479, 14.0019,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab a Nitrous for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received your selected Nitrous...", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 3: //Car Color / Paintjob
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageColorLabel] = CreateDynamic3DTextLabel("Get Spray Can here!\n/getcomp", -1, 1001.4952, -1954.7518, 14.2152, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerColor] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1001.4952, -1954.7518, 14.2152,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab the Spray Can to paint for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received the selected Car Paint...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 4: //Stereo
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageStereoLabel] = CreateDynamic3DTextLabel("Get Stereo here!\n/getcomp", -1, 1003.1806, -1946.7775, 14.1858, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerStereo] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1003.1806, -1946.7775, 14.1858,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab the replacement Stereo for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received the selected Stereo...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 5: //Hydraulics
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageHydroLabel] = CreateDynamic3DTextLabel("Get Hydraulic Suspensions here!\n/getcomp", -1, 1002.9689, -1951.9474, 14.1895, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerHydro] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1002.9689, -1951.9474, 14.1895,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab the replacement Suspensions for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received the selected Hydraulics...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 6: //Side Skirts
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageSkirtLabel] = CreateDynamic3DTextLabel("Get Side Skirts here!\n/getcomp", -1, 1001.1490, -1957.5988, 14.2212, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerSkirt] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1001.1490, -1957.5988, 14.2212,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab the side skirts for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received the selected side skirts...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 7: //Exhaust
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageExhaustLabel] = CreateDynamic3DTextLabel("Get Exhausts here!\n/getcomp", -1, 1013.7177, -1939.0479, 14.0019, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerExhaust] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1013.7177, -1939.0479, 14.0019,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab the Exhaust for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received the selected exhaust...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 8: //Roof
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageRoofLabel] = CreateDynamic3DTextLabel("Get Roofs here!\n/getcomp", -1, 1001.4976, -1954.6532, 14.2152, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerRoof] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1001.4976, -1954.6532, 14.2152,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab the Roofs for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received the selected roof...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 9: //Spoiler
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageSpoilerLabel] = CreateDynamic3DTextLabel("Get Spoilers here!\n/getcomp", -1, 1001.4976, -1954.6532, 14.2152, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerSpoiler] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1001.4976, -1954.6532, 14.2152,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab the Spoiler for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received the selected spoiler...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		case 10: //Bumper
		{
			MechFaction[playerid][CustomerID] = targetid;

			MechGarageData[playerid][GarageBumperLabel] = CreateDynamic3DTextLabel("Get Bumpers here!\n/getcomp", -1, 1001.4976, -1954.6532, 14.2152, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid); //changethis
			MechCustomer[playerid][CustomerBumper] = true;
			SetPlayerRaceCheckpoint(playerid, 1, 1001.4976, -1954.6532, 14.2152,0.0,0.0,0.0, 3.0); //changethis
			MechFaction[playerid][HasActiveCP] = true;
			format(string, sizeof(string), "~y~Grab the Bumpers for ~g~%s~y~~n~Inside the garage.", customername); //changethis
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ received the selected bumpers...", mechanicname); //changethis
			GameTextForPlayer(customerid, string, 5000, 3);
		}
		default: SendClientMessage(playerid, -1, "BUG: Unknown Error Occured. Func:GetComponents. Please report to: justinnn#3670");
	}

	return 1;
}

CMD:getcomp(playerid, params[])
{
	if(!MechFaction[playerid][IsAMember]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");

	// 1- Wheels/Tires
	if((MechCustomer[playerid][CustomerTires]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1004.0828, -1944.8304, 14.1619))
	{
		SetPlayerFacingAngle(playerid, 53.8378);
		ApplyAnimation(playerid, "INT_HOUSE", "WASH_UP", 2.0, false, true, true, false, 0, true);
		SetPlayerAttachedObject(playerid, 0, 1074, 5, 0.1489, 0.1500, 0.1469, 0.0000, 0.0000, -78.5000, 0.7030, 0.6130, 0.7870, 0xFFFFFFFF, 0xFFFFFFFF);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		ReturnToCustomer(playerid, 1);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageTiresLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageTiresLabel]);
	}
	// 2- Nitro
	else if ((MechCustomer[playerid][CustomerNitro]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1013.7177, -1939.0479, 14.0019))
	{
		SetPlayerFacingAngle(playerid, 347.5130);
		ApplyAnimation(playerid, "INT_HOUSE", "WASH_UP", 2.0, false, true, true, false, 0, true); 
		SetPlayerAttachedObject(playerid, 0, 1010, 5, 0.2979, 0.0860, 0.0050, -83.7000, -11.9001, 8.3999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		ReturnToCustomer(playerid, 2);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageNitroLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageNitroLabel]);
	}
	// 3- Car Color/Paintjob
	else if ((MechCustomer[playerid][CustomerColor]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1001.4952, -1954.7518, 14.2152))
	{
		SetPlayerFacingAngle(playerid, 91.2273);
		ApplyAnimation(playerid, "INT_HOUSE", "WASH_UP", 2.0, false, true, true, false, 0, true); 
		SetPlayerAttachedObject(playerid, 0, 2749, 6, 0.0639, 0.0079, -0.4728, 0.0000, 0.0000, 0.0000, 1.2300, 1.5039, 1.8519, 0xFFFFFFFF, 0xFFFFFFFF);
		SetPlayerAttachedObject(playerid, 1, 18729, 6, 0.6678, -0.0009, -1.4709, 0.0000, -24.3999, -73.7000, 0.5029, 2.5599, 0.9789, 0xFFFFFFFF, 0xFFFFFFFF);
		ReturnToCustomer(playerid, 3);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageColorLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageColorLabel]);
	}
	// 4- Stereo
	else if ((MechCustomer[playerid][CustomerStereo]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1003.1806, -1946.7775, 14.1858))
	{
		SetPlayerFacingAngle(playerid, 36.3601);
		ApplyAnimation(playerid, "INT_HOUSE", "WASH_UP", 2.0, false, true, true, false, 0, true); 
		SetPlayerAttachedObject(playerid, 0, 3013, 5, 0.1560, 0.0799, 0.0589, -85.4999, -10.1999, 12.3999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		ReturnToCustomer(playerid, 4);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageStereoLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageStereoLabel]);
	}
	// 5- Hydraulics
	else if ((MechCustomer[playerid][CustomerHydro]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1002.9689,-1951.9474,14.1895))
	{
		SetPlayerFacingAngle(playerid, 19.7298);
		ApplyAnimation(playerid, "INT_HOUSE", "WASH_UP", 2.0, false, true, true, false, 0, true); 
		SetPlayerAttachedObject(playerid, 0, 2798, 5, 0.1740, 0.0189, 0.1630, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		ReturnToCustomer(playerid, 5);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageHydroLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageHydroLabel]);
	}
	// 6- Side Skirts
	else if ((MechCustomer[playerid][CustomerSkirt]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1001.1490, -1957.5988, 14.2212))
	{
		SetPlayerFacingAngle(playerid, 92.9395);
		ApplyAnimation(playerid, "ROB_BANK", "CAT_SAFE_OPEN", 4.1, false, false, false, false, 0, false);
		SetPlayerAttachedObject(playerid, 0, 19921, 5, -0.0069, 0.0040, -0.0159, -111.6000, 174.4998, 103.1999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
		ReturnToCustomer(playerid, 6);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageSkirtLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageSkirtLabel]);
	}
	// 7- Exhaust
	else if ((MechCustomer[playerid][CustomerExhaust]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1001.4976,-1954.6532,14.2152))
	{
		SetPlayerFacingAngle(playerid, 92.9395);
		ApplyAnimation(playerid, "ROB_BANK", "CAT_SAFE_OPEN", 4.1, false, false, false, false, 0, false);
		SetPlayerAttachedObject(playerid, 0, 19921, 5, -0.0069, 0.0040, -0.0159, -111.6000, 174.4998, 103.1999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
		ReturnToCustomer(playerid, 7);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageExhaustLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageExhaustLabel]);
	}
	// 8- Roof
	else if ((MechCustomer[playerid][CustomerRoof]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1001.4976,-1954.6532,14.2152))
	{
		SetPlayerFacingAngle(playerid, 92.9395);
		ApplyAnimation(playerid, "ROB_BANK", "CAT_SAFE_OPEN", 4.1, false, false, false, false, 0, false);
		SetPlayerAttachedObject(playerid, 0, 19921, 5, -0.0069, 0.0040, -0.0159, -111.6000, 174.4998, 103.1999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
		ReturnToCustomer(playerid, 8);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageRoofLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageRoofLabel]);
	}
	// 9- Spoiler
	else if ((MechCustomer[playerid][CustomerSpoiler]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1001.4976,-1954.6532,14.2152))
	{
		SetPlayerFacingAngle(playerid, 92.9395);
		ApplyAnimation(playerid, "ROB_BANK", "CAT_SAFE_OPEN", 4.1, false, false, false, false, 0, false);
		SetPlayerAttachedObject(playerid, 0, 19921, 5, -0.0069, 0.0040, -0.0159, -111.6000, 174.4998, 103.1999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
		ReturnToCustomer(playerid, 9);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageSpoilerLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageSpoilerLabel]);
	}
	// 10- Bumper
	else if ((MechCustomer[playerid][CustomerBumper]) && IsPlayerInRangeOfPoint(playerid, 1.0, 1001.4976,-1954.6532,14.2152))
	{
		SetPlayerFacingAngle(playerid, 92.9395);
		ApplyAnimation(playerid, "ROB_BANK", "CAT_SAFE_OPEN", 4.1, false, false, false, false, 0, false);
		SetPlayerAttachedObject(playerid, 0, 19921, 5, -0.0069, 0.0040, -0.0159, -111.6000, 174.4998, 103.1999, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
		ReturnToCustomer(playerid, 10);
		if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageBumperLabel]))
			DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageBumperLabel]);
	}

	return 1;
}


ReturnToCustomer(playerid, compid)
{
	new customerveh = MechFaction[playerid][CustomerVehID];
	new Float:x, Float:y, Float:z;
	switch(compid)
	{
		//Wheels/Tires
		case 1:
		{
			GetVehicleRelativePos(customerveh, x, y, z, -1.0, 1.0, 0.0);
			MechCustomer[playerid][CustomerTiresLabel] = CreateDynamic3DTextLabel("Place the Wheels here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 2- Nitro 
		case 2:
		{
			GetVehicleRelativePos(customerveh, x, y, z, 0.0, -3.0, 0.0);
			MechCustomer[playerid][CustomerNitroLabel] = CreateDynamic3DTextLabel("Place the Nitrous here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 3- Car Color/Paintjob
		case 3:
		{
			GetVehicleRelativePos(customerveh, x, y, z, 0.0, 3.0, 0.0);
			MechCustomer[playerid][CustomerColorLabel] = CreateDynamic3DTextLabel("Spray the paint here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 4- Stereo
		case 4:
		{
			GetVehicleRelativePos(customerveh, x, y, z, 0.0, 3.0, 0.0);
			MechCustomer[playerid][CustomerStereoLabel] = CreateDynamic3DTextLabel("Place the Stereo here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 5- Hydraulics
		case 5:
		{
			GetVehicleRelativePos(customerveh, x, y, z, -1.0, 1.0, 0.0);
			printf("CustomervehID: %d X: %f Y: %f Z: %f", customerveh, x, y, z);
			MechCustomer[playerid][CustomerHydroLabel] = CreateDynamic3DTextLabel("Place the Hydraulics here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 6- Side Skirts
		case 6:
		{
			GetVehicleRelativePos(customerveh, x, y, z, -1.5, 0.0, 0.1);
			printf("CustomervehID: %d X: %f Y: %f Z: %f", customerveh, x, y, z);
			MechCustomer[playerid][CustomerSkirtLabel] = CreateDynamic3DTextLabel("Place the Side Skirts here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 7- Exhaust
		case 7:
		{
			GetVehicleRelativePos(customerveh, x, y, z, 0.0, -3.0, 0.0);
			MechCustomer[playerid][CustomerExhaustLabel] = CreateDynamic3DTextLabel("Place the Exhaust here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 8- Roof
		case 8:
		{
			GetVehicleRelativePos(customerveh, x, y, z, -1.5, 0.0, 0.1);
			printf("CustomervehID: %d X: %f Y: %f Z: %f", customerveh, x, y, z);
			MechCustomer[playerid][CustomerRoofLabel] = CreateDynamic3DTextLabel("Place the Roof here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 9- Spoiler
		case 9:
		{
			GetVehicleRelativePos(customerveh, x, y, z, 0.0, -3.0, 0.0);
			MechCustomer[playerid][CustomerSpoilerLabel] = CreateDynamic3DTextLabel("Place the Spoiler here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		// 10- Bumper
		case 10:
		{
			GetVehicleRelativePos(customerveh, x, y, z, 0.0, 3.0, 0.0);
			MechCustomer[playerid][CustomerBumperLabel] = CreateDynamic3DTextLabel("Place the Bumper here!\n/placecomp", -1, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, playerid);
			SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 3.0);
			MechFaction[playerid][HasActiveCP] = true;
		}
		default: return SendClientMessage(playerid, -1, "BUG: Unknown Error Occured. Func:ReturnToCustomer. Please report to: justinnn#3670");
	}
	return 1;
}

CMD:placecomp(playerid, params[])
{
	new customerveh = MechFaction[playerid][CustomerVehID], customerid = MechFaction[playerid][CustomerID];
	new Float:x, Float:y, Float:z, string[250], customername[MAX_PLAYER_NAME], mechanicname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, mechanicname, sizeof(mechanicname));
	GetPlayerName(customerid, customername, sizeof(customername));
	
	if(!MechFaction[playerid][IsAMember]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");

	// 1- Wheels/Tires
	if(MechCustomer[playerid][CustomerTires])
	{
		GetVehicleRelativePos(customerveh, x, y, z, -1.0, 1.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the tire of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.1, false, true, true, false, 0, true);

		format(string, sizeof(string), "~y~Placing replacement wheels for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 1);
	}
	// 2- Nitro
	else if (MechCustomer[playerid][CustomerNitro])
	{
		GetVehicleRelativePos(customerveh, x, y, z, 0.0, -3.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the nitrous of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.1, false, true, true, false, 0, true);
		format(string, sizeof(string), "~y~Placing replacement nitrous for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 2);
	}
	// 3- Car Color/Paintjob
	else if (MechCustomer[playerid][CustomerColor])
	{
		GetVehicleRelativePos(customerveh, x, y, z, 0.0, 3.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "SPRAYCAN", "SPRAYCAN_FIRE", 3.0, true, true, true, false, 0, true);
		format(string, sizeof(string), "~y~Applying new paint for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is applying new paint", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		PlayerPlaySound(customerid, 1134, 0.0, 0.0, 0.0);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 3);
	}
	// 4- Stereo
	else if (MechCustomer[playerid][CustomerStereo])
	{
		GetVehicleRelativePos(customerveh, x, y, z, 0.0, 3.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "PED", "ATM", 3.0, false, false, false, false, 0, true);
		format(string, sizeof(string), "~y~Placing replacement stereo for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 4);
	}
	// 5- Hydraulics
	else if (MechCustomer[playerid][CustomerHydro])
	{
		GetVehicleRelativePos(customerveh, x, y, z, -1.0, 1.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Hydraulics of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.1, false, true, true, false, 0, true);
		format(string, sizeof(string), "~y~Placing replacement Hydraulics for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 5);
	}
	// 6- Side Skirts
	else if (MechCustomer[playerid][CustomerSkirt])
	{
		GetVehicleRelativePos(customerveh, x, y, z, -1.5, 0.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Side Skirts of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.1, false, true, true, false, 0, true);
		format(string, sizeof(string), "~y~Placing replacement Skirts for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 6);
	}
	// 7- Exhaust
	else if (MechCustomer[playerid][CustomerExhaust])
	{
		GetVehicleRelativePos(customerveh, x, y, z, 0.0, -3.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Exhaust of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.1, false, true, true, false, 0, true);
		format(string, sizeof(string), "~y~Placing replacement Exhaust for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 7);
	}
	// 8- Roof
	else if (MechCustomer[playerid][CustomerRoof])
	{
		GetVehicleRelativePos(customerveh, x, y, z, -1.5, 0.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Roof of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "PED", "ATM", 3.0, false, false, false, false, 0, true);
		format(string, sizeof(string), "~y~Placing replacement Roof for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 8);
	}
	// 9- Spoiler
	else if (MechCustomer[playerid][CustomerSpoiler])
	{
		GetVehicleRelativePos(customerveh, x, y, z, 0.0, -3.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Spoiler of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "PED", "ATM", 3.0, false, false, false, false, 0, true);
		format(string, sizeof(string), "~y~Placing replacement Spoiler for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 9);
	}
	// 10- Bumper
	else if (MechCustomer[playerid][CustomerBumper])
	{
		GetVehicleRelativePos(customerveh, x, y, z, 0.0, 3.0, 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Bumper of player's vehicle. Follow the Floating text and type /placecomp.");
		ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.1, false, true, true, false, 0, true);
		format(string, sizeof(string), "~y~Placing replacement Bumper for ~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ is assembling the component", mechanicname);
		GameTextForPlayer(customerid, string, 5000, 3);
		SetTimerEx("PlaceComponent", 5000, false, "ii", playerid, 10);
	}
	else return SendClientMessage(playerid, -1, "[justinnn Mech Sys]: Offer Tuning Services first, type /tuning <playerid>");
	return 1;
}

// 1- Wheels/Tires 						1004.0828, -1944.8304, 14.1619
// 2- Nitro 							1013.7177, -1939.0479, 14.0019
// 3- Car Color/Paintjob 				1001.4952, -1954.7518, 14.2152
// 4- Stereo 							1003.1806, -1946.7775, 14.1858
// 5- Hydraulics 						1002.9689, -1951.9474, 14.1895
// 6- Side Skirts 						1001.1490, -1957.5988, 14.2212
// 7- Exhaust 							1013.7177, -1939.0479, 14.0019
// 8- Roof 								1001.4976, -1954.6532, 14.2152
// 9- Spoiler 							1001.4976, -1954.6532, 14.2152
// 10- Bumper 							1001.4976, -1954.6532, 14.2152

forward PlaceComponent(playerid, compid);
public PlaceComponent(playerid, compid)
{
	new string[250], customername[MAX_PLAYER_NAME], mechanicname[MAX_PLAYER_NAME];
	
	new customerid = MechFaction[playerid][CustomerID];
	new customerveh = MechFaction[playerid][CustomerVehID];
	new customercompid = MechFaction[playerid][CustomerVehComp];
	new customercompid2 = MechFaction[playerid][CustomerVehComp2];
	GetPlayerName(playerid, mechanicname, sizeof(mechanicname));
	GetPlayerName(customerid, customername, sizeof(customername));
	RemoveMechAnims(playerid, true);

	switch(compid)
	{
		case 1: // 1- Wheels/Tires
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~wheels for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your wheels!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerTiresLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerTiresLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 2: // 2- Nitro 
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Nitrous for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your Nitrous!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerNitroLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerNitroLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 3: // 3- Car Color/Paintjob 
		{
			new color1 = MechFaction[playerid][CustomerColor1], color2 = MechFaction[playerid][CustomerColor2];
			if(MechFaction[playerid][IsCustomerPaintjob] != -1)
			{
				new paintjobid = MechFaction[playerid][IsCustomerPaintjob];
				ChangeVehiclePaintjob(customerveh, paintjobid);
				if(PlayerInfo[customerid][vModel] && (PlayerInfo[customerid][pVeh] == customerveh))
				{
					PlayerInfo[customerid][vPJ] = paintjobid;
				}
				else if(PlayerInfo[customerid][vVModel] && (PlayerInfo[customerid][pVVeh] == customerveh))
				{
					PlayerInfo[customerid][vVPJ] = paintjobid;
				}
			}
			else 
			{
				ChangeVehicleColor(customerveh, color1, color2);
				if(PlayerInfo[customerid][vModel] && (PlayerInfo[customerid][pVeh] == customerveh))
				{
					PlayerInfo[customerid][vC1] = color1;
					PlayerInfo[customerid][vC2] = color2;
				}
				else if(PlayerInfo[customerid][vVModel] && (PlayerInfo[customerid][pVVeh] == customerveh))
				{
					PlayerInfo[customerid][vVC1] = color1;
					PlayerInfo[customerid][vVC2] = color2;
				}
			}
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Car Spray for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 6000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has painted your car!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 6000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerColorLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerColorLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 4: // 4- Stereo
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Stereo for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your Stereo!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerStereoLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerStereoLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 5: // 5- Hydraulics
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Hydraulics for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your Hydraulics!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerHydroLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerHydroLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 6: // 6- Side Skirts
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Side Skirts for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your Side Skirts!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerSkirtLabel]))
					DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerSkirtLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 7: // 7- Exhaust 
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Exhaust for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your Exhaust!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerExhaustLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerExhaustLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 8: // 8- Roof 	
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Roof for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your Roof!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerRoofLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerRoofLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 9: // 9- Spoiler 
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Spoiler for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your Spoiler!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerSpoilerLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerSpoilerLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}
		case 10: // 10- Bumper
		{
			if(customercompid2 != -1) AddVehicleComponent(customerveh,customercompid2);
			AddVehicleComponent(customerveh,customercompid);
			RepairVehicle(customerveh);
			if(Fuel[customerveh] < 100) Fuel[customerveh] += 15;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			PlayerPlaySound(customerid,1133,0.0,0.0,0.0);
			format(string, sizeof(string), "~y~Bumper for ~g~%s~y~~n~Done!", customername);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~y~Mechanic ~g~%s~y~ has assembled your Bumper!~n~Enjoy!", mechanicname);
			GameTextForPlayer(customerid, string, 5000, 3);
			if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerBumperLabel]))
				DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerBumperLabel]);
			ResetMechCustomers(playerid, customerid, false);
			GiveDodMoney(playerid, MechFee);
			GiveDodMoney(customerid, -MechFee);
		}

		default: return SendClientMessage(playerid, -1, "BUG: Unknown Error Occured. Callback:PlaceComponent. Please report to: justinnn#3670");
	}
	SetTimerEx("ShowTuneMenu", 5000, false, "i", customerid);
	SetTimerEx("ShowGameText", 3000, false, "i", playerid);
	return 1;
}

forward ShowGameText(playerid);
public ShowGameText(playerid)
{
	GameTextForPlayer(playerid, "Your customer will select another modifications. ~n~~r~Please dont go far from the customer!", 5000, 3);
}

forward ShowTuneMenu(playerid);
public ShowTuneMenu(playerid)
{

	return MechTuneDialog(playerid);
}

// 1- Wheels/Tires 						1004.0828, -1944.8304, 14.1619
// 2- Nitro 							1013.7177, -1939.0479, 14.0019
// 3- Car Color/Paintjob 				1001.4952, -1954.7518, 14.2152
// 4- Stereo 							1003.1806, -1946.7775, 14.1858
// 5- Hydraulics 						1002.9689, -1951.9474, 14.1895
// 6- Side Skirts 						1001.1490, -1957.5988, 14.2212
// 7- Exhaust 							1013.7177, -1939.0479, 14.0019
// 8- Roof 								1001.4976, -1954.6532, 14.2152
// 9- Spoiler 							1001.4976, -1954.6532, 14.2152
// 10- Bumper 							1001.4976, -1954.6532, 14.2152

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new mechname[MAX_PLAYER_NAME], customername[MAX_PLAYER_NAME];
	new mechid = TunerMechID[playerid]; //Fetches the ID of mechanic that stored earlier when he types /tuning
	new vehid = GetPlayerVehicleID(playerid);
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    GetPlayerName(mechid, mechname, sizeof(mechname));
    GetPlayerName(playerid, customername, sizeof(customername));
    if(dialogid == 9111 && response)
	{
		switch(listitem)
		{
			//Nitro
			case 0: 
			{
				MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
				MechFaction[mechid][CustomerVehComp] = 1010; //Stores the customer's Selected component.
				return GetComponents(mechid, playerid, 2); // Do the get action.;
			}
			//Color List
			case 1: ShowColorList1(playerid);
			//Wheels/Tires
			case 2: ShowPlayerDialog(playerid,9113,DIALOG_STYLE_LIST,"Choose a wheel:","Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces\n{FF0000}Back","Select","Cancel");
			//Stereo
			case 3: 
			{
				MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
				MechFaction[mechid][CustomerVehComp] = 1086; //Stores the customer's Selected component.
				return GetComponents(mechid, playerid, 4); // Do the get action.;
			}
			//Hydraulics
			case 4:
			{
				MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
				MechFaction[mechid][CustomerVehComp] = 1087; //Stores the customer's Selected component.
				return GetComponents(mechid, playerid, 5); // Do the get action.;
			}
			case 5:
			{
				if(vehmd == 562 || vehmd == 565 || vehmd == 559 || vehmd == 561 || vehmd == 560 || vehmd == 558)
				{
					ShowPlayerDialog(playerid,9114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 576 || vehmd == 575 || vehmd == 535)
				{
					MechLowrider(playerid);
    			}
				else if(vehmd == 567 || vehmd == 536)
				{
                    ShowPlayerDialog(playerid,9002,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nHardtop Roof\nSofttop Roof\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 534)
				{
                    ShowPlayerDialog(playerid,9003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 496 || vehmd == 505 || vehmd == 516 || vehmd == 517 || vehmd == 518 || vehmd == 527 || vehmd == 529 || vehmd == 540 || vehmd == 546 || vehmd == 547 || vehmd == 549 || vehmd == 550 || vehmd == 551 || vehmd == 580 || vehmd == 585 || vehmd == 587 || vehmd == 589 || vehmd == 600 || vehmd == 603 || vehmd == 401 || vehmd == 410 || vehmd == 415 || vehmd == 418 || vehmd == 420 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 491 || vehmd == 492)
				{
					RegularMechTuneDialog(playerid);
				}
				else
				{
					SendClientMessage(playerid,RED,"Your car cannot be tuned!");
				}
			}
		}
	}
	if(dialogid == 9112 && response) //colors //done
	{
	    new selectedcol = strval(inputtext), string[258];
	    if (!(0 <= selectedcol <= 255))
	    {
	    	ShowColorList1(playerid);
	    	SendClientMessage(playerid, 0xFF0000FF, "Error: Color ID should be ranging from 0 to 255");
	    	return 1;
	    }
	    
	    MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
		MechFaction[mechid][CustomerColor1] = selectedcol;
		format(string, sizeof(string), "* %s has selected ID: %d as Color1", customername, MechFaction[mechid][CustomerColor1]);
		SendClientMessage(mechid, COLOR_GREY, string);
		return ShowColorList2(playerid); // Do the get action.;
	}
	if(dialogid == 9116 && response) //colors //done
	{
	    new selectedcol = strval(inputtext), string[258];
	    if (!(0 <= selectedcol <= 255))
	    {
	    	ShowColorList2(playerid);
	    	SendClientMessage(playerid, 0xFF0000FF, "Error: Color ID should be ranging from 0 to 255");
	    	return 1;
	    }
	    MechFaction[mechid][CustomerColor2] = selectedcol;
	    format(string, sizeof(string), "* %s has selected ID: %d as Color2", customername, MechFaction[mechid][CustomerColor2]);
		SendClientMessage(mechid, COLOR_GREY, string);
		format(string, sizeof(string), "* Mechanic %s will paint your vehicle with desired colors.", mechname);
		SendClientMessage(playerid, COLOR_GREY, string);
        return GetComponents(mechid, playerid, 3); // Do the get tires action. 3-Paintjob/Color
	}
	if(dialogid == 9113 && response) //wheels //done
	{
	    if(listitem == 16) return MechTuneDialog(playerid);
		new Warray[] = {1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
		MechFaction[mechid][CustomerVehComp] = Warray[listitem]; //Stores the customer's Selected component.
		return GetComponents(mechid, playerid, 1); // Do the get tires action.
	}
	if(dialogid == 9114 && response) //nothing
	{
	    switch(listitem)
	    {
			case 0: ShowPlayerDialog(playerid,9115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: MechMod(playerid);
			case 2: MechMod1(playerid);
			case 3: MechTuneDialog(playerid);
		}
	}
	if(dialogid == 9001 && response) //nothing 
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid,9115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: MechMod2(playerid);
			case 2: MechMod3(playerid);
			case 3: MechTuneDialog(playerid);
		}
	}
	if(dialogid  == 9002) //done //done
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid,9115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: MechMod2(playerid);
			case 2: MechMod3(playerid);
			case 3:
			{
				if(vehmd == 567)//Savanna
				{
					MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1130; //Stores the customer's Selected component.
					return GetComponents(mechid, playerid, 8); // Do the get action.;
				}
				if(vehmd == 536)//Blade
                {
                    MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1128; //Stores the customer's Selected component.
					return GetComponents(mechid, playerid, 8); // Do the get action.;
				}
			}
			case 4:
			{
				if(vehmd == 567)//Savanna
				{
    				MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1131; //Stores the customer's Selected component.
					return GetComponents(mechid, playerid, 8); // Do the get action.;
				}
				if(vehmd == 536)//Blade
                {
                    MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1103; //Stores the customer's Selected component.
					return GetComponents(mechid, playerid, 8); // Do the get action.;
				}
			}
			case 5: MechTuneDialog(playerid);
		}
	}
	if(dialogid  == 9003)//Remington //done
	{
		switch(listitem)
		{
		    case 0:ShowPlayerDialog(playerid,9115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
		    case 1: MechMod2(playerid);
			case 2: MechMod3(playerid);
			case 3:
			{
				MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
				MechFaction[mechid][CustomerVehComp] = 1122; //Stores the customer's Selected component.
				MechFaction[mechid][CustomerVehComp2] = 1101; //Stores the customer's Selected component.
				return GetComponents(mechid, playerid, 6);
			}
			case 4:
			{
				MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
				MechFaction[mechid][CustomerVehComp] = 1106; //Stores the customer's Selected component.
				MechFaction[mechid][CustomerVehComp2] = 1124; //Stores the customer's Selected component.
				return GetComponents(mechid, playerid, 8);
			}
			case 5: MechTuneDialog(playerid);
		}
	}
	if(dialogid == 9004 && response)//regular cars
	{
	    switch(listitem)
	    {
			case 0:
			{
				ShowPlayerDialog(playerid,9010,DIALOG_STYLE_LIST,"Spoiler","Pro\nWin\nDrag\nAlpha\nChamp\nRace\nWorx\nFury\n{FF0000}Back","Select","Cancel");
			}
			case 1:
			{
			    if(vehmd == 585 || vehmd == 603 || vehmd == 439 || vehmd == 458 || vehmd == 418 || vehmd == 527 || vehmd == 580)
			    {
					MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1006; //Stores the customer's Selected component.
					return GetComponents(mechid, playerid, 8);
				}
				else if(vehmd == 439 || vehmd == 458 || vehmd == 491 || vehmd == 517 ||vehmd == 547)
			    {ShowPlayerDialog(playerid,9040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
                else if(vehmd == 415)
                {
					MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1007; //Stores the customer's Selected component.
					MechFaction[mechid][CustomerVehComp2] = 1071;
					return GetComponents(mechid, playerid, 6);
				}
                else ShowPlayerDialog(playerid,9020,DIALOG_STYLE_LIST,"Hood","Champ\nFury\nRace\nWorx\n{FF0000}Back","Select","Cancel");
			}
			case 2:
			{
			    if(vehmd == 549 || vehmd == 585 || vehmd == 603)
				{ShowPlayerDialog(playerid,9040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
				else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 516 || vehmd == 491 || vehmd == 517 || vehmd == 418 || vehmd == 527 || vehmd == 580)
				{
					MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1007; //Stores the customer's Selected component.
					MechFaction[mechid][CustomerVehComp2] = 1071;
					return GetComponents(mechid, playerid, 6);
				}
				else if(vehmd == 415 || vehmd == 547 || vehmd == 420 || vehmd == 587)
				{MechTuneDialog(playerid);}
				else
				{
					MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1006; //Stores the customer's Selected component.
					return GetComponents(mechid, playerid, 8);
				}
				
			}
			case 3:
			{
			    if(vehmd == 549 || vehmd == 585 || vehmd == 603 || vehmd == 551 || vehmd == 492 || vehmd == 529)
			    {
					MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1007; //Stores the customer's Selected component.
					MechFaction[mechid][CustomerVehComp2] = 1071;
					return GetComponents(mechid, playerid, 6);
				}
				else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 505)
				{ShowPlayerDialog(playerid,9060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
				else if(vehmd == 418 || vehmd == 527 || vehmd == 580 || vehmd == 491 || vehmd == 517 || vehmd == 516)
				{MechTuneDialog(playerid);}
				else{ShowPlayerDialog(playerid,9040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
			}
			case 4:
			{
			    if(vehmd == 549 || vehmd == 550 || vehmd == 585 || vehmd == 603)
			    {ShowPlayerDialog(playerid,9060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
			    else if(vehmd == 489 || vehmd == 505 || vehmd == 551 || vehmd == 492 || vehmd == 529 || vehmd == 439 || vehmd == 458 || vehmd == 410 || vehmd == 436)
			    {MechTuneDialog(playerid);}
			    else
			    {
					MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
					MechFaction[mechid][CustomerVehComp] = 1007; //Stores the customer's Selected component.
					MechFaction[mechid][CustomerVehComp2] = 1071;
					return GetComponents(mechid, playerid, 6);
				}
			}
			case 5:
			{
				if(vehmd == 585 || vehmd == 603 || vehmd == 550 || vehmd == 549)
				{MechTuneDialog(playerid);}
				else{ShowPlayerDialog(playerid,9060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
			}
			case 6: MechTuneDialog(playerid);
		}
	}
	if(dialogid == 9010 && response) //DONE
	{
		if(listitem == 8) return RegularMechTuneDialog(playerid);
		new Xarray[] = {1000,1001,1002,1003,1014,1015,1016,1023};
		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
		MechFaction[mechid][CustomerVehComp] = Xarray[listitem]; //Stores the customer's Selected component.
		return GetComponents(mechid, playerid, 9); // Do the action.
	}
	if(dialogid == 9020 && response) //Done
	{
		if(listitem == 4) return RegularMechTuneDialog(playerid);
		new Xarray[] = {1004,1005,1011,1012};
		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
		MechFaction[mechid][CustomerVehComp] = Xarray[listitem]; //Stores the customer's Selected component.
		return GetComponents(mechid, playerid, 8); // Do the action.
	}
	if(dialogid == 9040 && response)//Done
	{
	    switch(listitem)
	    {
			case 0:
			{
				MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
				MechFaction[mechid][CustomerVehComp] = 1142; //Stores the customer's Selected component.
				MechFaction[mechid][CustomerVehComp2] = 1143; //Stores the customer's Selected component.
				return GetComponents(mechid, playerid, 8);
			}
			case 1:
			{
				MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
				MechFaction[mechid][CustomerVehComp] = 1144; //Stores the customer's Selected component.
				MechFaction[mechid][CustomerVehComp2] = 1145; //Stores the customer's Selected component.
				return GetComponents(mechid, playerid, 8);
			}
			case 2: RegularMechTuneDialog(playerid);
		}
	}
	if(dialogid == 9060 && response)//DONE //done
	{
		if(listitem == 2) return RegularMechTuneDialog(playerid);
		new Xarray[] = {1013,1024};
		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
		MechFaction[mechid][CustomerVehComp] = Xarray[listitem]; //Stores the customer's Selected component.
		return GetComponents(mechid, playerid, 5); // Do the action.
	}
	if(dialogid == 9115 && response)//DONE //done
	{
	    if(listitem == 3) return MechTuneDialog(playerid);
		new Parray[] = {0,1,2};
		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
		MechFaction[mechid][IsCustomerPaintjob] = Parray[listitem];
		return GetComponents(mechid, playerid, 3);
	}
	if(dialogid == 9511 && response)//DONE //done
	{
	    if(listitem == 7) return ShowPlayerDialog(playerid,9114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
		if(vehmd == 558)//Uranus
		{
			new Varray[] = {1090,1094,1092,1088,1164,1166,1168};
	 		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1090) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1090;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1094) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1094;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1092) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1092;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1088) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1088;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1164) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1164;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1166) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1166;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1168) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1168;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 559)//Jester
		{
            new Varray[] = {1069,1071,1065,1067,1162,1160,1159};
            MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1069) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1069;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1071) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1071;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1065) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1065;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1067) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1067;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1162) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1162;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1160) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1160;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1159) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1159;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 560)//Sultan
		{
            new Varray[] = {1026,1027,1028,1032,1138,1169,1141};
            MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1026) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1026;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1027) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1027;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1028) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1028;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1032) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1032;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1138) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1138;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1169) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1169;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1141) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1141;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 561)//Stratum
		{
            new Varray[] = {1056,1062,1064,1055,1058,1155,1154};
            MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1056) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1056;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1062) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1062;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1064) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1064;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1055) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1055;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1058) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1058;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1155) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1155;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1154) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1154;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 562)//Elegy
		{
            new Varray[] = {1036,1040,1034,1038,1147,1171,1149};
            MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1036) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1036;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1040) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1040;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1034) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1034;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1038) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1038;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1147) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1147;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1171) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1171;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1149) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1149;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 565)//Flash
		{
            new Varray[] = {1047,1051,1046,1054,1049,1153,1150};
            MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1047) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1047;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1051) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1051;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1046) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1046;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1054) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1054;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1049) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1049;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1153) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1153;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1150) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1150;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
	}
	if(dialogid == 9512 && response)//DONE //done
	{
	    if(listitem == 7) return ShowPlayerDialog(playerid,9114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
	    if(vehmd == 558)//Uranus
	    {
            new Varray[] = {1093,1095,1089,1091,1163,1165,1167};
            MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1093) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1093;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1095) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1095;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1089) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1089;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1091) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1091;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1163) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1163;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1165) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1165;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1167) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1167;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
	    if(vehmd == 559)//Jester
	    {
            new Varray[] = {1070,1072,1066,1068,1158,1173,1161};
	 		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1070) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1070;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1072) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1072;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1066) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1066;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1068) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1068;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1158) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1158;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1173) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1173;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1161) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1161;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
	    if(vehmd == 560)//Sultan
	    {
            new Varray[] = {1031,1030,1029,1033,1139,1170,1140};
	 		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1031) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1031;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1030) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1030;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1029) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1029;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1033) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1033;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1139) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1139;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1170) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1170;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1140) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1140;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
	    if(vehmd == 561)//Stratum
	    {
            new Varray[] = {1057,1063,1059,1061,1060,1157,1156};
	 		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1057) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1057;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1063) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1063;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1059) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1059;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1061) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1061;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1060) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1060;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1157) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1157;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1156) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1156;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
	    if(vehmd == 562)//Elegy
	    {
            new Varray[] = {1039,1041,1037,1035,1146,1172,1148};
	 		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1039) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1039;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1041) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1041;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1037) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1037;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1035) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1035;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1146) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1146;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1172) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1172;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1148) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1148;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
	    if(vehmd == 565)//Flash
	    {
            new Varray[] = {1048,1052,1045,1053,1050,1152,1151};
	 		MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1048) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1048;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1052) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1052;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1045) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1045;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1053) //Roof
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1053;
	 			return GetComponents(mechid, playerid, 8);
	 		}
	 		else if(Varray[listitem] == 1050) //Spoiler
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1050;
	 			return GetComponents(mechid, playerid, 9);
	 		}
	 		else if(Varray[listitem] == 1152) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1152;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1151) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1151;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
	}
	if(dialogid == 9153 && response)//DONE //done
	{
		if(vehmd == 576)
        {
			if(listitem == 5) return MechLowrider(playerid);
      		new Varray[] = {1134,1137,1136,1191,1192};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1134) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1134;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1137) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1137;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1136) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1136;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1191) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1191;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1192) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1192;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 575)
		{
			if(listitem == 5) return MechLowrider(playerid);
  			new Varray[] = {1042,1099,1044,1174,1176};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1042) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1042;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1099) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1099;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1044) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1044;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1174) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1174;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1176) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1176;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 535)
		{
  			if(listitem == 6) return MechLowrider(playerid);
  			new Varray[] = {1115,1109,1113,1117,1118,1120};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1115) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1115;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1109) //Rear Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1109;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1113) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1113;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1117) //Front Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1117;
	 			return GetComponents(mechid, playerid, 10);
	 		}

	 		else if(Varray[listitem] == 1118) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1118;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1120) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1120;
	 			return GetComponents(mechid, playerid, 6);
	 		}
		}
		if(vehmd == 567)
		{
		    if(listitem == 5) return MechLowrider(playerid);
			new Varray[] = {1129,1133,1102,1187,1189};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1129) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1129;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1133) //Right Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1133;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1102) //Left Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1102;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1187) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1187;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1189) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1189;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 536)
		{
		    if(listitem == 5) return MechLowrider(playerid);
			new Varray[] = {1104,1108,1107,1184,1182};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1104) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1104;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1108) //Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1108;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1107) //Sideskirt
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1107;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1184) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1184;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1182) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1182;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 534) //TEST DIS
		{
		    if(listitem == 6) return MechLowrider(playerid);
			new Varray[] = {1100,1123,1125,1126,1179,1180};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1100) //Misc1
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1100;
	 			return GetComponents(mechid, playerid, 4);
	 		}
	 		else if(Varray[listitem] == 1123) //Misc2
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1123;
	 			return GetComponents(mechid, playerid, 4);
	 		}
	 		else if(Varray[listitem] == 1125) //Misc3
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1125;
	 			return GetComponents(mechid, playerid, 4);
	 		}
			else if(Varray[listitem] == 1126) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1126;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1179) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1179;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1180) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1180;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
	}
	if(dialogid == 9514 && response)//DONE
	{
		if(vehmd == 576)
		{
		    if(listitem == 3) return MechLowrider(playerid);
  			new Varray[] = {1135,1190,1193};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
	 		if(Varray[listitem] == 1135) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1135;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1190) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1190;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1193) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1193;
	 			return GetComponents(mechid, playerid, 10);
	 		}
		}
		if(vehmd == 575)
		{
		    if(listitem == 3) return MechLowrider(playerid);
  			new Varray[] = {1177,1175,1043};
  			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1177) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1177;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1175) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1175;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1043) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1043;
	 			return GetComponents(mechid, playerid, 7);
	 		}
		}
		if(vehmd == 535)
		{
		    if(listitem == 5) return MechLowrider(playerid);
  			new Varray[] = {1110,1116,1114,1119,1121};
  			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1110) //Bulbars
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1110;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1116) //Bulbars
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1116;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1114) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1114;
	 			return GetComponents(mechid, playerid, 7);
	 		}
	 		else if(Varray[listitem] == 1119) //Skirts
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1119;
	 			return GetComponents(mechid, playerid, 6);
	 		}
	 		else if(Varray[listitem] == 1121) //Skirts
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1121;
	 			return GetComponents(mechid, playerid, 6);
	 		}
		}
  		if(vehmd == 567)
		{
		    if(listitem == 3) return MechLowrider(playerid);
			new Varray[] = {1188,1186,1132};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1188) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1188;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1186) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1186;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1132) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1132;
	 			return GetComponents(mechid, playerid, 7);
	 		}
		}
		if(vehmd == 536)
		{
		    if(listitem == 3) return MechLowrider(playerid);
			new Varray[] = {1181,1183,1105};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1181) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1181;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1183) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1183;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1105) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1105;
	 			return GetComponents(mechid, playerid, 7);
	 		}
		}
		if(vehmd == 534)
		{
		    if(listitem == 3) return MechLowrider(playerid);
			new Varray[] = {1185,1178,1127};
			MechFaction[mechid][CustomerVehID] = vehid; //Stores the customer's vehicle ID
			if(Varray[listitem] == 1185) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1185;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1178) //Bumper
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1178;
	 			return GetComponents(mechid, playerid, 10);
	 		}
	 		else if(Varray[listitem] == 1127) //Exhaust
	 		{
	 			MechFaction[mechid][CustomerVehComp] = 1127;
	 			return GetComponents(mechid, playerid, 7);
	 		}
		}
	}
	if((dialogid == 9514 || 9153 || 9512 || 9511 || 9115 || 9060 || 9040 || 9020 || 9010 || 9004 || 9003 || 9002 || 9001 || 9114 || 9113 || 9116 || 9112 || 9111) && !response)
	{
		ResetMechCustomers(mechid, playerid);
		SendClientMessage(playerid, COLOR_GREY, "You canceled the tuning selection. Thank you for doing business with East Beach Mechanics! Come again.");
		TurnOffEngineForTuning(playerid);
		IsMechCustomer[playerid] = false;
		TunerMechID[playerid] = -1;
	}
	#if defined M_OnDialogResponse
		return M_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnDialogResponse
	#undef OnDialogResponse
#else
	#define _ALS_OnDialogResponse
#endif

#define OnDialogResponse M_OnDialogResponse
#if defined M_OnDialogResponse
	forward M_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
#endif

MechTuneDialog(playerid)
{
	ShowPlayerDialog(playerid,9111,DIALOG_STYLE_LIST,"Select things to put in your car","Nitro\nCar Color\nWheels\nStereo\nHydraulics\nCar Components","Select","Cancel");
	return 1;
}
MechLowrider(playerid)
{
    ShowPlayerDialog(playerid,9001,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\n{FF0000}Back","Select","Cancel");
    return 1;
}
RegularMechTuneDialog(playerid)
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
 	new string[128];
	if(vehmd == 401 || vehmd == 496 || vehmd == 518 || vehmd == 540 || vehmd == 546 || vehmd == 589)
	{string = "Spoiler\nHood\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 549)
	{string = "Spoiler\nHood\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 550)
	{string = "Spoiler\nHood\nRoof\nVents\nLights\n{FF0000}Back";}
	else if(vehmd == 585 || vehmd == 603)
	{string = "Spoiler\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 410 || vehmd == 436)
	{string = "Spoiler\nRoof\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 439 || vehmd == 458)
	{string = "Spoiler\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 551 || vehmd == 492 || vehmd == 529)
	{string = "Spoiler\nHood\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 489 || vehmd == 505)
	{string = "Spoiler\nHood\nRoof\nLights\n{FF0000}Back";}
	else if(vehmd == 516)
	{string = "Spoiler\nHood\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 491 || vehmd == 517)
	{string = "Spoiler\nVents\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 418 || vehmd == 527 || vehmd == 580)
	{string = "Spoiler\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 420 || vehmd == 587)
	{string = "Spoiler\nHood\n{FF0000}Back";}
	else if(vehmd == 547)
	{string = "Spoiler\nVents\n{FF0000}Back";}
	else if(vehmd == 415)
	{string = "Spoiler\nSideskirt\n{FF0000}Back";}
	
    ShowPlayerDialog(playerid,9004,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancel");
    return 1;
}
MechMod(playerid)//Alien
{
    ShowPlayerDialog(playerid,9511,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancel");
    return 1;
}
MechMod1(playerid)//X-Flow
{
	ShowPlayerDialog(playerid,9512,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancel");
	return 1;
}
MechMod2(playerid)//Chrome
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
	if(vehmd == 576 || vehmd == 575)
	{string = "Right Sideskirt\nLeft Sideskirt\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{string = "Front Bullbars\nRear Bullbars\nExhaust\nFront Bumper\nRight Sideskirt\nLeft Sideskirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536)
	{string = "Exhaust\nRight Sideskirt\nLeft Sideskirt\nRear Bumper\nFront Bumper\n{FF0000}Back";}
	else if(vehmd == 534)
	{string = "Grill\nBars\nLights\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	
    ShowPlayerDialog(playerid,9153,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancel");
	return 1;
}
MechMod3(playerid)//Slamin
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
    if(vehmd == 575 || vehmd == 576)
	{string = "Exhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{string = "Rear Bullbars\nFront Bullbars\nExhaust\nRight Sideskirt\nLeft Sidedkirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536 || vehmd == 534)
	{string = "Front Bumper\nRear Bumper\nExhaust\n{FF0000}Back";}
    ShowPlayerDialog(playerid,9514,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancel");
    return 1;
}

ShowColorList1(playerid)
{
	static color_list[3072];
	color_list[0] = EOS;

	for (new colorid; colorid != sizeof gVehicleColors; colorid++)
	{
	    format(color_list, sizeof color_list, "%s{%06x}%03d%s", color_list, gVehicleColors[colorid] >>> 8, colorid, !((colorid + 1) % 16) ? ("\n") : (" "));
	}
	ShowPlayerDialog(playerid, 9112, DIALOG_STYLE_INPUT, "justinnn#3670 Mechanic System - Select Color1", color_list, "Sige", "Cancel");
}

ShowColorList2(playerid)
{
	static color_list[3072];
	color_list[0] = EOS;

	for (new colorid; colorid != sizeof gVehicleColors; colorid++)
	{
	    format(color_list, sizeof color_list, "%s{%06x}%03d%s", color_list, gVehicleColors[colorid] >>> 8, colorid, !((colorid + 1) % 16) ? ("\n") : (" "));
	}
	return ShowPlayerDialog(playerid, 9116, DIALOG_STYLE_INPUT, "justinnn#3670 Mechanic System - Select Color2", color_list, "Sige", "Cancel");
}

CMD:isplayermech(playerid, params[])
{
	new targetid, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", targetid, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /isplayermech [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), "Player: %s Mechanic Status: %d, %d", RPN(targetid), MechFaction[targetid][IsAMember], MechFaction[targetid][IsMember]);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:testlabel(playerid, params[])
{
	new Float:x, Float:y, Float:z, veh = GetPlayerVehicleID(playerid);
	new Float:x1, Float:y1, Float:z1, string[250];
	new Float:x2, Float:y2, Float:z2;
	if(sscanf(params, "fff", x1, y1, z1)) return SendClientMessage(playerid, -1, "testlabel <x,y,z>");
	if(!IsPlayerInVehicle(playerid, veh)) return SendClientMessage(playerid, -1, "You must be inside a veh.");
	GetVehiclePos(veh, x2, y2, z2);
	format(string, sizeof(string), "Initial Place: VehID: %d. X: %f Y: %f Z: %f.", veh, x2, y2, z2);
	SendClientMessage(playerid, -1, string);

	GetVehicleRelativePos(veh, x, y, z, x1, y1, z1);
	CreateDynamic3DTextLabel("Test LMAO", COLOR_GREY, x, y, z, 10);
	format(string, sizeof(string), "Place at: VehID: %d. X: %f Y: %f Z: %f.", veh, x, y, z);
	SendClientMessage(playerid, -1, string);
	return 1;
}

public OnPlayerConnect(playerid)
{
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 4.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 4.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 4.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 4.0, 0, 0, 0, 0, 0);

	IsMechCustomer[playerid] = false;
	TunerMechID[playerid] = -1;
	MechFaction[playerid][CustomerID] = -1;
	MechFaction[playerid][CustomerVehID] = -1;
	MechFaction[playerid][CustomerVehComp] = -1;
	MechFaction[playerid][CustomerVehComp2] = -1;
	MechFaction[playerid][HasActiveCP] = false;
	MechFaction[playerid][HasOfferedTuning] = false;
	MechFaction[playerid][IsCustomerPaintjob] = -1;
	MechFaction[playerid][IsOnDuty] = false;

	MechCustomer[playerid][CustomerTiresLabel] = Text3D: -1;
	MechCustomer[playerid][CustomerColorLabel] = Text3D: -1;
	MechCustomer[playerid][CustomerExhaustLabel] = Text3D: -1;
	MechCustomer[playerid][CustomerBumperLabel] = Text3D: -1;
	MechCustomer[playerid][CustomerRoofLabel] = Text3D: -1;
	MechCustomer[playerid][CustomerSpoilerLabel] = Text3D: -1;
	MechCustomer[playerid][CustomerSkirtLabel] = Text3D: -1;
	MechCustomer[playerid][CustomerNitroLabel] = Text3D: -1;
	MechCustomer[playerid][CustomerHydroLabel] = Text3D: -1;
	
	MechGarageData[playerid][GarageTiresLabel] = Text3D: -1;
	MechGarageData[playerid][GarageColorLabel] = Text3D: -1;
	MechGarageData[playerid][GarageExhaustLabel] = Text3D: -1;
	MechGarageData[playerid][GarageBumperLabel] = Text3D: -1;
	MechGarageData[playerid][GarageRoofLabel] = Text3D: -1;
	MechGarageData[playerid][GarageSpoilerLabel] = Text3D: -1;
	MechGarageData[playerid][GarageSkirtLabel] = Text3D: -1;
	MechGarageData[playerid][GarageNitroLabel] = Text3D: -1;
	MechGarageData[playerid][GarageHydroLabel] = Text3D: -1;

	MechCustomer[playerid][CustomerTires] = false;
	MechCustomer[playerid][CustomerColor] = false;
	MechCustomer[playerid][CustomerExhaust] = false;
	MechCustomer[playerid][CustomerBumper] = false;
	MechCustomer[playerid][CustomerRoof] = false;
	MechCustomer[playerid][CustomerSpoiler] = false;
	MechCustomer[playerid][CustomerSkirt] = false;
	MechCustomer[playerid][CustomerNitro] = false;
	MechCustomer[playerid][CustomerHydro] = false;
	MechCustomer[playerid][CustomerStereo] = false;

	#if defined M_OnPlayerConnect
		return M_OnPlayerConnect(playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerConnect
	#undef OnPlayerConnect
#else
	#define _ALS_OnPlayerConnect
#endif

#define OnPlayerConnect M_OnPlayerConnect
#if defined M_OnPlayerConnect
	forward M_OnPlayerConnect(playerid);
#endif

RemoveMechAnims(playerid, bool:removeobj)
{
	SetPlayerSpecialAction(playerid, 0);
	ClearAnimations(playerid, 1);
	if(removeobj) 
	{
		RemovePlayerAttachedObject(playerid, 0);
		RemovePlayerAttachedObject(playerid, 1);
	}
}

TurnOffEngineForTuning(playerid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid, string[128];
	vehicleid = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!engine)
	{
	    SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, PlayerInfo[playerid][vLocked], bonnet, boot, objective);}
	    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, PlayerInfo[playerid][vVLocked], bonnet, boot, objective);}
	    format(string, sizeof(string), "* %s turns the vehicle's engine on.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else
	{
	    SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, PlayerInfo[playerid][vLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, PlayerInfo[playerid][vVLocked], bonnet, boot, objective);}
	    format(string, sizeof(string), "* %s turns the vehicle's engine off.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

	}
}

CMD:tuning(playerid, params[])
{
	new playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!MechFaction[playerid][IsMember]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /tuning [playerid]");
	if(!IsPlayerConnected(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInDynamicArea(playerid, MechArea)) return SendClientMessage(playerid, COLOR_GREY, "You must be in East Beach Mechanics Place to start tuning.");
	if(!IsPlayerNearPlayer(playerid, playerb, 3)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(!MechFaction[playerid][IsOnDuty]) return SendClientMessage(playerid, COLOR_GREY, "Go on duty as mechanic first before you offer tuning services.");
	new Float:vH; GetVehicleHealth(GetPlayerVehicleID(playerb), vH);
	new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerb), vel[0], vel[1], vel[2]);
    if(vH < 250) return SendClientMessage(playerid, COLOR_GREY, "The vehicle's engine is too hot to be tuned/repaired.");
	if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't repair a vehicle while it's moving.");
	if(GetPlayerState(playerb) == PLAYER_STATE_DRIVER)
	{
		new string[250], mechanicname[MAX_PLAYER_NAME], customername[MAX_PLAYER_NAME];
		GetPlayerName(playerb, customername, sizeof(customername));
		GetPlayerName(playerid, mechanicname, sizeof(mechanicname));
		OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
		format(string, sizeof(string), "~y~You offered an tuning services for ~n~~g~%s", customername);
		GameTextForPlayer(playerid, string, 5000, 3);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, "You offered someone an tuning services. Please wait until they select which to tune.");
		TunerMechID[playerb] = playerid; //Stores the ID of mechanic for customer's variable.
		IsMechCustomer[playerb] = true;
		MechFaction[playerid][CustomerID] = playerb;
		TurnOffEngineForTuning(playerb);
		format(string, sizeof(string), "~g~East Beach Mechanics:~n~~y~Mech ~b~%s ~y~offered you tuning services.", mechanicname);
		GameTextForPlayer(playerb, string, 3000, 3);
		SetTimerEx("ShowTuneMenu", 3000, false, "i", playerb);
		format(string, sizeof(string), "Applies Fixes and Fuel. Current Rate: $%d", MechFee);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
		SendClientMessage(playerb, COLOR_GREY, "Choose the following modifications you want to apply to your vehicle.");
		SendClientMessage(playerb, COLOR_GREY, "Click 'CANCEL' to cancel tuning.");
		SendClientMessage(playerb, COLOR_DARKRED, "NOTE: YOU MUST OWN THE VEHICLE TO SAVE THE TUNED COMPONENTS!");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Target player must be driving a vehicle.");
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT || PLAYER_STATE_NONE || PLAYER_STATE_EXIT_VEHICLE || PLAYER_STATE_WASTED || PLAYER_STATE_SPECTATING)
	{
		if(IsMechCustomer[playerid])
		{
			new tunerid = TunerMechID[playerid];
			GameTextForPlayer(playerid, "~r~Tuning Canceled.", 5000, 3);
			GameTextForPlayer(tunerid, "~r~Your customer cancelled the tuning.", 5000, 3);
			TogglePlayerControllable(playerid, true);
			ResetMechCustomers(tunerid, playerid);
			SendClientMessage(playerid, COLOR_GREY, "If you cant move. You can turn on your engine with /engine.");
			return ShowPlayerDialog(playerid, -1, 0, "", "", "", "" ), 1;
		}
	}
	#if defined Mech_OnPlayerStateChange
		return Mech_OnPlayerStateChange(playerid, newstate, oldstate);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerStateChange
	#undef OnPlayerStateChange
#else
	#define _ALS_OnPlayerStateChange
#endif

#define OnPlayerStateChange Mech_OnPlayerStateChange
#if defined Mech_OnPlayerStateChange
	forward Mech_OnPlayerStateChange(playerid, newstate, oldstate);
#endif

ResetMechCustomers(playerid, customerid, bool:resetpref = true)
{
	//Customer
	if(resetpref)
	{
		TunerMechID[customerid] = -1;
		IsMechCustomer[customerid] = false;
	}

	//Mechanic
	MechFaction[playerid][CustomerID] = -1;
	MechFaction[playerid][CustomerVehID] = -1;
	MechFaction[playerid][CustomerVehComp] = -1;
	MechFaction[playerid][CustomerVehComp2] = -1;
	MechFaction[playerid][CustomerColor1] = -1;
	MechFaction[playerid][CustomerColor2] = -1;
	MechFaction[playerid][IsCustomerPaintjob] = -1;
	MechFaction[playerid][HasOfferedTuning] = false;
	MechFaction[playerid][HasActiveCP] = false;

	MechCustomer[playerid][CustomerTires] = false;
	MechCustomer[playerid][CustomerColor] = false;
	MechCustomer[playerid][CustomerExhaust] = false;
	MechCustomer[playerid][CustomerBumper] = false;
	MechCustomer[playerid][CustomerRoof] = false;
	MechCustomer[playerid][CustomerSpoiler] = false;
	MechCustomer[playerid][CustomerSkirt] = false;
	MechCustomer[playerid][CustomerNitro] = false;
	MechCustomer[playerid][CustomerHydro] = false;
	MechCustomer[playerid][CustomerStereo] = false;

	DisablePlayerRaceCheckpoint(playerid);
	TogglePlayerControllable(customerid, true);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageTiresLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageTiresLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerTiresLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerTiresLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageColorLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageColorLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerColorLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerColorLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageExhaustLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageExhaustLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerExhaustLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerExhaustLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageBumperLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageBumperLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerBumperLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerBumperLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageRoofLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageRoofLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerRoofLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerRoofLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageSpoilerLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageSpoilerLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerSpoilerLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerSpoilerLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageSkirtLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageSkirtLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerSkirtLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerSkirtLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageNitroLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageNitroLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerNitroLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerNitroLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageHydroLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageHydroLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerHydroLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerHydroLabel]);

	if(IsValidDynamic3DTextLabel(MechGarageData[playerid][GarageStereoLabel]))
		DestroyDynamic3DTextLabel(MechGarageData[playerid][GarageStereoLabel]);
	else if(IsValidDynamic3DTextLabel(MechCustomer[playerid][CustomerStereoLabel]))
		DestroyDynamic3DTextLabel(MechCustomer[playerid][CustomerStereoLabel]);
}

stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;    // Making the vehicle rotation compatible with pawns sin/cos
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot,degrees) * yoff + floatcos(rot,degrees) * xoff + x;
    y = floatcos(rot,degrees) * yoff - floatsin(rot,degrees) * xoff + y;
    z = zoff + z;

    /*
       where xoff/yoff/zoff are the offsets relative to the vehicle
       x/y/z then are the coordinates of the point with the given offset to the vehicle
       xoff = 1.0 would e.g. point to the right side of the vehicle, -1.0 to the left, etc.
    */
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(areaid == MechArea)
	{
		if(IsMechCustomer[playerid])
		{
			new tunerid = TunerMechID[playerid];
			GameTextForPlayer(playerid, "~r~Tuning Canceled.", 5000, 3);
			GameTextForPlayer(tunerid, "~r~Your customer cancelled the tuning.", 5000, 3);
			TogglePlayerControllable(playerid, true);
			ResetMechCustomers(tunerid, playerid);
			SendClientMessage(playerid, COLOR_GREY, "If you cant move. You can turn on your engine with /engine.");
			return ShowPlayerDialog(playerid, -1, 0, "", "", "", "" ), 1;
		}
		if(MechFaction[playerid][IsOnDuty])
		{
			new string[258];
			MechFaction[playerid][IsOnDuty] = false;
			SetPlayerSkin(playerid, LastSkin[playerid]);
			LastSkin[playerid] = -1;
			format(string, sizeof(string), "~r~[EAST BEACH MECHANICS]~n~~y~You get out of tuning area~n~ You automatically get off duty!");
			GameTextForPlayer(playerid, string, 5000, 3);
			RemovePlayerAttachedObject(playerid, 5);
			RemovePlayerAttachedObject(playerid, 6);
			if(MechFaction[playerid][CustomerID] != -1)
			{
				new customerid = MechFaction[playerid][CustomerID];
				GameTextForPlayer(playerid, "~r~Tuning Canceled.", 5000, 3);
				GameTextForPlayer(customerid, "~r~Your mechanic cancelled the tuning.", 5000, 3);
				TogglePlayerControllable(playerid, true);
				ResetMechCustomers(playerid, customerid);
				SendClientMessage(customerid, COLOR_GREY, "If you cant move. You can turn on your engine with /engine.");
				return ShowPlayerDialog(customerid, -1, 0, "", "", "", "" ), 1;
			}
		}
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsMechCustomer[playerid])
	{
		new tunerid = TunerMechID[playerid];
		GameTextForPlayer(playerid, "~r~Tuning Canceled.", 5000, 3);
		GameTextForPlayer(tunerid, "~r~Your customer cancelled the tuning.", 5000, 3);
		TogglePlayerControllable(playerid, true);
		ResetMechCustomers(tunerid, playerid);
		SendClientMessage(playerid, COLOR_GREY, "If you cant move. You can turn on your engine with /engine.");
		return ShowPlayerDialog(playerid, -1, 0, "", "", "", "" ), 1;
	}
	else if(MechFaction[playerid][CustomerID] != -1)
	{
		new customerid = MechFaction[playerid][CustomerID];
		GameTextForPlayer(playerid, "~r~Tuning Canceled.", 5000, 3);
		GameTextForPlayer(customerid, "~r~Your mechanic cancelled the tuning.", 5000, 3);
		TogglePlayerControllable(playerid, true);
		ResetMechCustomers(playerid, customerid);
		SendClientMessage(customerid, COLOR_GREY, "If you cant move. You can turn on your engine with /engine.");
		return ShowPlayerDialog(customerid, -1, 0, "", "", "", "" ), 1;
	}
	#if defined Mech_OnPlayerDisconnect
		return Mech_OnPlayerDisconnect(playerid, reason);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerDisconnect
	#undef OnPlayerDisconnect
#else
	#define _ALS_OnPlayerDisconnect
#endif

#define OnPlayerDisconnect Mech_OnPlayerDisconnect
#if defined Mech_OnPlayerDisconnect
	forward Mech_OnPlayerDisconnect(playerid);
#endif